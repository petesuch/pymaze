#!/usr/bin/python3.7

#    n1.py
#    active version of mazesolver.py
#    may or may not be broken
#
#   @author:  Peter A. Suchsland
#   A maze solving program inspired by a physics project
#   !!!! Does Not Work !!!!
###################################################################################
# TODO:
#
#   *   In Perl arrays can be created and named on the fly.
#
#   *   I used that feature extensively to create branches where each branch
#   *   was named after its germination point.  I am not sure where to begin
#   *   to implement that functionality or whether I will have to create another
#   *   type of algorithm or data structure.
#   *   All of the variables is a sore point; I have lost track of what is needed.

###################################################################################

#### START main program

SZ = 40
my maze
my cp

#####################################################################################################################################################################

maze = (
#["A","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","B"],
#["o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","x","o","x","x","x","x","x","x","x","x","x","o","o","o","o","o","o","o"],
#["o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","o","x","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o"],
#["o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","o","x","o","o","o","o","x","x","x","x","o","o","o","o","o","o","o"],
#["o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","o","x","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o"],
#["o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","x","x","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o"],
#["o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o"],
#["o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","x","x","x","x","o","o","o","o","o","o"],
#["o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o"],
#["o","o","o","o","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","o","o","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o"],
#["x","x","x","x","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","x","x","o","o","o","o","o","o"],
#["x","o","o","o","o","x","x","x","o","o","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","x","x","o","o","o","o","o","o","o"],
#["x","o","o","o","o","x","o","x","o","o","o","o","o","o","o","o","o","o","o","o","x","x","x","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o"],
#["x","o","o","o","o","x","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o"],
#["x","o","o","o","o","x","o","x","o","o","o","o","o","o","o","o","o","o","o","o","x","o","x","o","o","o","x","x","x","o","o","x","o","o","o","o","o","o","o","o"],
#["x","o","o","o","o","x","o","x","o","o","o","o","o","o","o","o","o","x","x","o","x","x","x","x","x","x","x","o","x","x","x","x","x","o","o","o","o","o","o","o"],
#["x","o","o","o","o","x","o","x","o","o","o","o","o","o","o","o","o","x","x","x","x","o","o","o","o","x","o","o","x","o","o","o","x","o","o","o","o","o","o","o"],
#["x","o","o","o","o","x","o","x","o","x","x","x","x","o","o","o","o","x","o","o","x","o","o","o","o","x","o","o","x","o","o","o","x","o","o","o","o","o","o","o"],
#["x","o","o","x","x","x","o","x","o","x","o","o","x","o","o","o","o","x","o","o","x","x","o","o","o","x","o","o","x","o","o","o","x","o","o","o","o","o","o","o"],
#["x","o","o","x","o","x","o","x","o","x","o","o","x","o","o","o","o","x","o","o","o","x","o","o","o","x","o","o","x","x","x","x","x","o","o","o","o","o","o","o"],
#["x","o","o","x","o","x","o","x","x","x","o","o","x","o","o","o","o","o","o","o","o","x","o","o","o","x","o","o","o","o","o","o","x","o","o","o","o","o","o","o"],
#["x","o","o","x","o","x","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","x","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","x","o","o","o","o","o","o","x","x","x","x","x","x","x","x","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","x","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","x","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","o","o","o","o","o","o","o","x","x","x","o","o","o","o","x","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","x","x","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","x","x","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","o","o","o","o","o","x","x","x","x","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","o","o","o","o","o","x","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","x","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","o","o","o","o","o","o","o","x","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","o","o","o","o","o","o","o","o","o","x","x","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["x","x","o","o","o","o","o","o","o","o","o","o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o"],
#["o","x","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","Z"]
#);

#####################################################################################################################################################################

# deepcopy will be needed here...
cp = @maze
# too many variables:
go = "x"
x = 0
y = 0
xnew = 0
ynew = 0
xs = 0
ys = 0
xp = 0
yp = 0
xprev = ""
yprev = ""
xstart = 0
ystart = 0
xright = 0
xleft = 0
yup = 0
ydown = 0
temp = 0
xtemp = 0
ytemp = 0
"DONE" # boolean
"solved" # boolean
tm = 0
germ # an array?
branch # an array?
j = 0
i = 0

print "********************************************\n"
#for $j ( 0 .. $SZ ) {
if $cp[0][ + j + ] == go:
#last if ( $solved eq "YES" );

    print "********************************************\n"
    print "*** Entering Maze at: ( + j + ,0) ***\n"
    print "********************************************\n"

    xs = $xstart = j
    ys = $ystart = 0
    DONE = "NO"

    while ("" + DONE + ""  not = "YES"):
        print "###############################################\n"
        print "*** Begin while-loop with: \$DONE =  + DONE + \n"
        germ = ""
        solved = "NO"
        x = xs
        y = ys
        xprev = xp
        yprev = yp

        cp[$yprev][$xprev] = "+"
        print "marking: \$cp[\$yprev][\ + xprev + ]\n"

        xright = x + +1
        xleft = x + -1
        yup = y + +1
        ydown = y + -1
        counter = 0

        print "\$xprev = $xprev\n\$yprev =  + yprev + \n"
        print "### In while-loop with:($x, + y + ) ###\n"
        # check below
        if $cp[$ydown][ + x + ] == go:
            addbud($x,$y,$x, + ydown)
            counter+=1        # check to the right
        if $cp[$y][ + xright + ] == go:
            addbud($x,$y,$xright, + y)
            counter+=1        # check to the left
        if $cp[$y][ + x + <=ft] == go:
            addbud($x,$y,$xleft, + y)
            counter+=1        # check above
        if $cp[$yup][ + x + ] == go:
            addbud($x,$y,$x, + yup)
            counter+=1

        #########    # there yet?
        if $cp[$yup][ + x + ] == go  and  yup == SZ:
            solved = "YES"
            print "************* FINISH ***************\n"
            print "************* FINISH ***************\n"
            DONE = "YES"
            print "# there yet? \$DONE is  + DONE + \n"
            cp[$y][$x] = "+"; # if its there mark it
            cp[$yup][$x] = "+"; # if its there mark it

        print "Branch Array \@branch contains these points:\n(@branch)\n"
        print "Branch Array Created B$xstart with these points:\n($B[ + xstart + ])\n"

        ##### not dead
        if counter > 0:
            addbranch(germ)
            print "Array $germ contains the following points:\n(@ + germ + )\n"
            temp = pop @ + germ
            ($xnew, $ynew) = split(/\,/,  + temp + )
            print "$xnew, + ynew + \n"
            print "The value of $germ:(@ + germ + )\n"

            xp = x
            yp = y

            xs = xnew
            ys = ynew


        ##### dead end
        if counter == 0:
            print "\nDEAD END: $x, + y +  \n"
            tm = pop @branch; # pop the branch
            print "\@$tm = (@ + tm + )\n"
#until ( "@$tm" ne "" || "$#branch" eq "-1" ) {
            tm = pop @branch
            print "\@$tm = @ + tm + \n"
            print "DURING:\t$tm contains: (@ + tm + )\n"
            print "DURING: the branch has: @branch\n"
        # if last element not empty push back on the branch
        if "@" + tm + ""  not = "":
            print "BEFORE: @branch\n"
            print "pushing back on the branch:\n"
            print "because $tm contains: (@ + tm + )\n"
push branch, $tm#push branch, $tm
            print "AFTER: @branch\n"
        #### pop the bud
        temp = pop @ + tm
        ($xtemp, $ytemp) = split( /,/,  + temp)

        if xtemp  not = ""  and  ytemp  not = "":
            xs = $xtemp; $ys = ytemp

        elif xtemp == ""  and  ytemp == "":
            print "\$xtemp and \ + ytemp +  are NULL\n"
            print "#  branch: @branch\n"
            DONE = "YES"
        print "\tPITSTOP: \$xs:($xs),\$ys:( + ys + )\n"
#}    # end of dead end

        print "# END of while-loop:\$DONE is  + DONE + \n"
        print "\$xs:($xs),\$ys:($ys),\$xp:($xp),\$yp:( + yp + )\n"
        print "# branch: @branch\n"
        print "# END of while-loop:\$DONE is  + DONE + \n"
        print "###########################################\n"
        cp[$y][$x] = "+"; # if its there mark it

        printarray()
        #Time::HiRes::sleep(0.5); #.5 seconds
        #Time::HiRes::usleep(1); # 1 microsecond.
#sleep 1;
#} # end of while-loop
#} # end of if
#} # end of for

        if solved == "YES":
            print "***************************************************\n"
            print "********** MAZE SOLVED ****************************\n"
            print "***************************************************\n"

        elif solved == "NO":
            print "***************************************************\n"
            print "*****  MAZE NOT SOLVED ****************************\n"
            print "***************************************************\n"

        printarray()
#### END main program
#
##########################################################
#
####    SUBROUTINES

def addbud():
    germ = "G$_[0]" + param1 + "[1]"
    if @$ >= rm:
        push $germ, "$_[2],$_[3]"#push $germ, "$_[2],$_[3]"
    else:
    germ = ( "$_[2]," + param1 + "[3]")

def addbranch():
    #$branch = "B[$xstart]"; # ie B3
    if @branch:
        push branch, "$_[0]"#push branch, "$_[0]"
    else:
        branch = ( "" + param1 + "[0]")
        print "Branch Array Created $branch with these points:\n(@ + branch + )\n"

def printarray():
    #for  $i ( 0 .. SZ ) {
    #for $j (  0 .. SZ ) {
    #print "$cp[$i][$j] "; # number of spaces here between go chars
    print "\n"
